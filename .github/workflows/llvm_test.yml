name: find llvm
on:
  workflow_dispatch:
    inputs:
      FILE:
        type: choice
        description: "配置文件"
        required: true
        default: oneplus_13
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_pad_pro_v
          - oneplus_13
          - oneplus_ace5_pro
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_2_pro
          - oneplus_pad_3
      BUILD_METHOD:
        type: choice
        description: "编译方式"
        required: true
        default: perf
        options:
          - gki
          - perf
      SUSFS_CI:
        type: choice
        description: "下载SUSFS模块调用方式"
        required: true
        default: CI
        options:
          - CI
          - Release
          - NoN
      SUFFIX:
        type: string
        description: "自定义内核后缀 (留空则使用随机字符串)"
        required: false
        default: "reigadegr"
      BUILD_TIME:
        type: string
        description: "自定义构建时间 (留空则使用当前时间)"
        required: false
        default: ""
      FAST_BUILD:
        type: boolean
        description: "是否启用极速构建？"
        required: true
        default: true
      VFS:
        type: boolean
        description: "是否启用手动钩子(VFS)？"
        required: true
        default: true
      KPM:
        type: boolean
        description: "是否启用内核模块(KPM)？"
        required: true
        default: true
      SCHED:
        type: boolean
        description: "是否添加风驰驱动？"
        required: true
        default: true
      ZRAM:
        type: boolean
        description: "是否添加更多的ZRAM算法？"
        required: true
        default: false

jobs:
  get-config:
    uses: ./.github/workflows/file-map.yml
    with:
      FILE: ${{ inputs.FILE }}
    secrets: inherit

  build:
    needs: get-config
    name: ${{ github.event.inputs.FAST_BUILD == 'true' && ' [FAST]' || '' }}${{ github.event.inputs.SCHED == 'true' && ' [SCHED]' || '' }}${{ github.event.inputs.ZRAM == 'true' && ' [ZRAM]' || '' }}For ${{ github.event.inputs.FILE }} ${{ github.event.inputs.BUILD_METHOD }} ${{ github.event.inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CPU: ${{ needs.get-config.outputs.CPU }}
      CPUD: ${{ needs.get-config.outputs.CPUD }}
      ANDROID_VERSION: ${{ needs.get-config.outputs.ANDROID_VERSION }}
      KERNEL_VERSION: ${{ needs.get-config.outputs.KERNEL_VERSION }}
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Disk Space
        run: |
          df -h
          uname -a

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Debug Show Selected Inputs
        run: |
          echo "Selected CPU: ${{ needs.get-config.outputs.CPU }}"
          echo "Selected FILE: ${{ github.event.inputs.FILE }}"
          echo "Selected CPUD: ${{ needs.get-config.outputs.CPUD }}"
          echo "Selected ANDROID_VERSION: ${{ needs.get-config.outputs.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ needs.get-config.outputs.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ github.event.inputs.BUILD_METHOD }}"
          echo "Custom SUFFIX: ${{ github.event.inputs.SUFFIX }}"
          echo "Custom BUILD_TIME: ${{ github.event.inputs.BUILD_TIME }}"
          echo "Selected SUSFS_CI: ${{ github.event.inputs.SUSFS_CI }}"
          echo "Selected VFS: ${{ github.event.inputs.VFS }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"
          echo "Selected FAST_BUILD: ${{ github.event.inputs.FAST_BUILD }}"       
          echo "Selected ZRAM: ${{ github.event.inputs.ZRAM }}"
          echo "Selected SCHED: ${{ github.event.inputs.SCHED }}"

      - name: Install Dependencies
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip curl bison flex \
            make binutils dwarves git lld pahole zip \
            perl make gcc python3 python-is-python3 \
            bc libssl-dev libelf-dev clang wget cmake python3 \
            clang cmake make llvm wget python3 python-is-python3 perl

      - name: LLVM latest
        run: |
          wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          sudo ./llvm.sh 20 all

      - name: LLVM finder
        run: |
          # for i in $(find /usr -type d -name "*llvm-20*"); do
            # echo $i
            # ls -al $i
          # done
          ls -al /usr/lib/llvm-20/bin
          which clang
          which llvm-ar
          which llvm-ar-20 || echo "出错"
          clang -v
          llvm-ar --version
          export PATH="/usr/lib/llvm-20/bin:$PATH"
          which clang
          which llvm-ar
          clang -v
          llvm-ar --version
          which llvm-ar-20
          llvm-ar-20 --version

      - name: Initialize Repo and Sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          mkdir kernel_platform && cd kernel_platform
          git clone --depth 1 https://github.com/reigadegr/android_kernel_common_oneplus_sm8750 -b oneplus/sm8750_v_15.0.0_oneplus_13 common
          cd common; git log; cd  ..
          cd  ..
          # repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ needs.get-config.outputs.CPU }} -m ${{ github.event.inputs.FILE }}.xml --depth=1
          # repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          if [  -e kernel_platform/common/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [  -e kernel_platform/msm-kernel/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Add SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          else
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s main
          fi
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Apply Patches SukiSU Ultra
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ needs.get-config.outputs.ANDROID_VERSION }}-${{ needs.get-config.outputs.KERNEL_VERSION }} --depth 1
          git clone https://github.com/ShirkNeko/SukiSU_patch.git --depth 1
          cd kernel_platform
          echo "正在拉取susfs补丁"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ needs.get-config.outputs.ANDROID_VERSION }}-${{ needs.get-config.outputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
          echo "正在拉取zram补丁"
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi

          cd ./common
          GKI_V="${{ needs.get-config.outputs.ANDROID_VERSION }}-${{ needs.get-config.outputs.KERNEL_VERSION }}"
          SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')

          if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
            echo "修复内核版本5.15.0到5.15.123可能存在的一些遗留问题"
            curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
            patch -p1 < fix_5.15.legacy.patch
            echo "fix_5.15_patch完成"
          fi
          KERNEL_VERSION="${{ needs.get-config.outputs.KERNEL_VERSION }}"
          file="${{ github.event.inputs.FILE }}"
          TRUSTY_EXISTS="false"
          if [[ "$KERNEL_VERSION" == "6.6" ]]; then
            if grep -qr 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${file}.xml"; then
              TRUSTY_EXISTS="true"
            fi
            echo "trusty_exists=$TRUSTY_EXISTS" >> $GITHUB_OUTPUT

            # if [[ "$TRUSTY_EXISTS" == "false" ]]; then
              # echo "修复内核版本6.6部分机型susfs的问题"
              # sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ needs.get-config.outputs.ANDROID_VERSION }}-${KERNEL_VERSION}.patch
              # sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ needs.get-config.outputs.ANDROID_VERSION }}-${KERNEL_VERSION}.patch
            # fi
          fi
          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
              echo "正在打susfs补丁"
              patch -p1 < 50_add_susfs_in_gki-${{ needs.get-config.outputs.ANDROID_VERSION }}-${{ needs.get-config.outputs.KERNEL_VERSION }}.patch || true
              echo "susfs_patch完成"
          fi

      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch
          echo "隐藏应用_patch完成"

      # OGKI转换GKI，无需修改 dtbo 开机
      - name: Apply Convert HMBIRD_OGKI to HMBIRD_GKI
        if: ${{ needs.get-config.outputs.KERNEL_VERSION == '6.6' }}
        run: |
            cd kernel_workspace/kernel_platform/common
            sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
            wget https://github.com/Numbersf/Action-Build/raw/SukiSU-Ultra/patches/hmbird_patch.patch
            echo "正在打OGKI转换GKI补丁"
            patch -p1 -F 3 < hmbird_patch.patch
            echo "OGKI转换GKI_patch完成"

      - name: Apply VFS
        if: ${{ github.event.inputs.VFS == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/common
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            echo "正在打vfs补丁"
            patch -p1 -F 3 < syscall_hooks.patch
            echo "vfs_patch完成"
      - name: Add Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ needs.get-config.outputs.KERNEL_VERSION }}"

          # SukiSU Ultra配置
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          if [ "${{ github.event.inputs.KPM }}" = 'true' ]; then
            echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
            echo "开启kpm"
          else
            echo "CONFIG_KPM=n" >> "$CONFIG_FILE"
            echo "关闭kpm"
          fi
          # VFS配置
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          fi

          # SUSFS配置
          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
              echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          fi
          # TMPFS配置*
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

          # BBR配置*
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"
          
          sed -i '/CONFIG_DEFAULT_CUBIC/d' "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_CUBIC=n" >> "$CONFIG_FILE"
          
          sed -i '/CONFIG_DEFAULT_TCP_CONG/d' "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_TCP_CONG=\"bbr\"" >> "$CONFIG_FILE"

          # ssg
          echo "CONFIG_MQ_IOSCHED_SSG=y" >> "$CONFIG_FILE"
          echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> "$CONFIG_FILE"
          
          # lto thin
          sed -i "/CONFIG_LTO_CLANG_THIN/d" "$CONFIG_FILE"          
          echo "CONFIG_LTO_CLANG_THIN=y" >> "$CONFIG_FILE"
          echo "CONFIG_LTO_CLANG=y" >> "$CONFIG_FILE"
          
          # 幽灵漏洞
          echo "CONFIG_MITIGATE_SPECTRE_BRANCH_HISTORY=n" >> "$CONFIG_FILE"
          echo "CONFIG_UNMAP_KERNEL_AT_EL0=n" >> "$CONFIG_FILE"
          
          # 堆栈保护关闭
          # echo "CONFIG_STACKPROTECTOR_PER_TASK=n" >> "$CONFIG_FILE"

          # Inline zram
          sed -i '/CONFIG_ZSMALLOC/d' "$CONFIG_FILE"
          sed -i '/CONFIG_ZRAM/d' "$CONFIG_FILE"
          echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM_DEF_COMP_ZSTD=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM_DEF_COMP=\"zstd\"" >> "$CONFIG_FILE"

          # walt scheduler
          # 不用开启，开启后无法开机
          # echo "CONFIG_SCHED_WALT=y" >> "$CONFIG_FILE"

          # ECN配置*
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"

          # ZRAM配置*
          # if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            # echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            # echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            # echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            # echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
            # echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
            # echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
          # fi

          # 移除构建审查
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Build Kernel FAST
        if: ${{ github.event.inputs.FAST_BUILD == 'true' }}
        id: fast_build
        run: |
          KERNEL_VERSION="${{ needs.get-config.outputs.KERNEL_VERSION }}"

          # 判断内核版本并设置对应 clang 路径
          if [[ "$KERNEL_VERSION" == "6.6" ]]; then
            CLANG_PATH="clang-r510928"
            CLANG_DIR="prebuilts"
          elif [[ "$KERNEL_VERSION" == "6.1" ]]; then
            CLANG_PATH="clang-r487747c"
            CLANG_DIR="prebuilts"
          elif [[ "$KERNEL_VERSION" == "5.15" ]]; then
            CLANG_PATH="clang-r450784e"
            CLANG_DIR="prebuilts"
          elif [[ "$KERNEL_VERSION" == "5.10" ]]; then
            CLANG_PATH="clang-r416183b"
            CLANG_DIR="prebuilts-master"
            USE_LLVM_IAS=true
          else
            echo "fallback=true" >> "$GITHUB_OUTPUT"
            echo "⚠️ 当前内核版本 \"$KERNEL_VERSION\" 没有对应 clang 工具链，回退使用官方构建脚本"
            echo "请考虑关闭 FAST_BUILD 或补充该版本 clang 路径"
            exit 0
          fi

          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/$CLANG_DIR/clang/host/linux-x86/$CLANG_PATH/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          export CC="ccache clang"

          # 安装依赖工具
          sudo apt install -y libelf-dev ccache lld

          cd kernel_workspace/kernel_platform/common
          export PATH="/usr/lib/llvm-20/bin:$PATH"
          make -j$(nproc --all) LLVM=1 LLVM_IAS=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+="-Wno-error -O2" gki_defconfig 2>&1
          for i in $(find  . -type f -name ".config"); do
             cp $i  ../../../config.txt
          done
      - name: misc
        run: |
          mkdir AnyKernel3
          cp config.txt AnyKernel3/


      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_${{ steps.file_clean.outputs.value }}${{ steps.suffix.outputs.value }}
          path: ./AnyKernel3/*
